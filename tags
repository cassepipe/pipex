!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
diralloc	src/ft_split.c	/^static char	**diralloc(const char *s, char c)$/;"	f	file:
execute_pipeline	src/main.c	/^void	execute_pipeline(char *cmd_str, int read_from, int write_to, char **env)$/;"	f
file_is_ok_or_die	src/main.c	/^static void	file_is_ok_or_die(char **cmdv, char **pathvar_entries)$/;"	f	file:
free_all	src/ft_split.c	/^static void	free_all(char **dir, long i)$/;"	f	file:
free_null_terminated_array_of_arrays	src/free_null_terminated_array_of_arrays.c	/^void	free_null_terminated_array_of_arrays(char **array)$/;"	f
ft_empty_string	src/utils.c	/^char	*ft_empty_string(void)$/;"	f
ft_open	src/main.c	/^static int	ft_open(char *filename, int flags, mode_t mode)$/;"	f	file:
ft_split	src/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	src/utils2.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strjoin	src/utils.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin3	src/strjoin3.c	/^char	*ft_strjoin3(char const *s1, char const *s2, char const *s3)$/;"	f
ft_strlcat	src/utils.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	src/utils.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	src/utils.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strncmp	src/utils2.c	/^int	ft_strncmp(const char *l, const char *r, size_t n)$/;"	f
ft_strndup	src/utils2.c	/^char	*ft_strndup(const char *s, size_t n)$/;"	f
g_cmd_not_found	src/main.c	/^static const char	g_cmd_not_found[] = {$/;"	v	file:
g_no_path_var_msg	src/getvar.c	/^static const char	g_no_path_var_msg[] = {$/;"	v	file:
g_no_pwd_var_msg	src/getvar.c	/^static const char	g_no_pwd_var_msg[] = {$/;"	v	file:
g_usage	src/print_usage_exit.c	/^static const char	g_usage[] = {$/;"	v	file:
get_command_path	src/get_command_path.c	/^char	*get_command_path(char *cmd, char *cwd, char **pathvar_entries)$/;"	f
get_path_var	src/getvar.c	/^char	*get_path_var(char **envp)$/;"	f
get_pwd_var	src/getvar.c	/^char	*get_pwd_var(char **envp)$/;"	f
main	src/main.c	/^int	main(int ac, char **av, char **envp)$/;"	f
next_sep	src/ft_split.c	/^static const char	*next_sep(const char *str, char sep)$/;"	f	file:
next_word	src/ft_split.c	/^static const char	*next_word(const char *str, char sep)$/;"	f	file:
pipe_or_die	src/main.c	/^static void	pipe_or_die(int *pipe_fds)$/;"	f	file:
print_usage_exit	src/print_usage_exit.c	/^void	print_usage_exit(void)$/;"	f
redirect_fd_to_fd	src/redirections.c	/^void	redirect_fd_to_fd(int fd1, int fd2)$/;"	f
redirect_stdin_fileno_to_fd	src/redirections.c	/^void	redirect_stdin_fileno_to_fd(int infile_fd)$/;"	f
redirect_stdin_fileno_to_pipe_read_end	src/redirections.c	/^void	redirect_stdin_fileno_to_pipe_read_end(int pipe_read_end_fd)$/;"	f
redirect_stdout_fileno_to_fd	src/redirections.c	/^void	redirect_stdout_fileno_to_fd(int outfile_fd)$/;"	f
redirect_stdout_fileno_to_pipe_write_end	src/redirections.c	/^void	redirect_stdout_fileno_to_pipe_write_end(int pipe_write_end_fd)$/;"	f
retrieve_command_in_pathvar	src/retrieve.c	/^char	*retrieve_command_in_pathvar(char *cmd, char **pathvar_entries)$/;"	f
retrieve_file_path_in_cwd	src/retrieve.c	/^char	*retrieve_file_path_in_cwd(char *cwd, char *cmd)$/;"	f
